2023-12-19 
Niestetynie umiem tego zrobic. Za trudne dla mnie
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2023-12-05
1.
def indeks(tekst, litera):
    indeks1 = []
    for i, znak in enumerate(tekst):
        if znak == litera:
            indeksy.append(i)
    return indeks
print(indeks(python, t))
2.
lista = ['Adam Nowak', 'Jan Kowalski', 'Piotr Baran']
inicjal = []
for i in lista:
    imie_nazw = i.split()
    imie, nazw = imie_nazw[0], imie_nazw[1]
    inicjal.append(imie[0] + nazw[0])

print(inicjal)
3.
def funkcji(tekst,wzorzec):
    for i in range(0, len(tekst)-len(wzorzec)+1):
        if wzorzec[0]==tekst[i]:
            tmp=len(wzorzec)+i
            if wzorzec==tekst[i:tmp]:
                return True
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import math

w = [(1,2),(3,4)]

def dlugosc(punkty):
    x1, y1 = punkty[0]
    x2, y2 = punkty[1]
    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
print(dlugosc(w))
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2023-12-01
1.
def wczytaj():
    return [float(x) for x in input("Podaj 1 wielomian: ").split()]

def dodaj(wielomian1, wielomian2):
    return [a + b for a, b in zip(wielomian1, wielomian2)]

def wypisz(wielomian):
    print("Wynik:", " + ".join([f"{a}" for i, a in enumerate(wielomian[::-1])]))

if __name__ == "__main__":
    wielomian1 = wczytaj()
    wielomian2 = wczytaj()

    suma = dodaj(wielomian1, wielomian2)
    wypisz(suma)
2.
def wczytaj():
    return [float(x) for x in input("Podaj wielomian: ").split()]

def pomnoz(wielomian1, wielomian2):
    return [a * b for a, b in zip(wielomian1, wielomian2)]

def wypisz(wielomian):
    print("Wynik:", " + ".join([f"{a}" for i, a in enumerate(wielomian[::-1])]))

if __name__ == "__main__":
    wielomian1 = wczytaj()
    wielomian2 = wczytaj()

    iloczyn = pomnoz(wielomian1, wielomian2)
    wypisz(iloczyn)
3.
def wczytaj():
    return [float(x) for x in input("Podaj współczynniki wielomianu: ").split()]

def obliczhorner(wielomian, c):
    iloraz = [wielomian[0]]

    for wspolczynnik in wielomian[1:]:
        iloraz.append(iloraz[-1] * c + wspolczynnik)

    return iloraz

def wypisz_iloraz(iloraz):
    print("Wynik dzielenia wielomianu przez dwumian:")
    print(" + ".join([f"{a}" for i, a in enumerate(iloraz[:-1][::-1])]))

if __name__ == "__main__":
    wielomian = wczytaj()
    c = float(input("Podaj c: "))

    horner = obliczhorner(wielomian, -c)
    wypisz_iloraz(horner)
 #zip czyli przyporządkowuje elementy na tych samych pozycjach w różnych sekwencjach.
 #enumerate służy do iteracji przez elementy sekwencji jednocześnie zwracając ich indeksy
 #.join jest używana do łączenia elementów sekwencji (takich jak listy) w jeden ciąg znaków. 
 # .split jest używana do dzielenia ciągu znaków na listę podciągów, używając określonego separatora
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2023-12-13
1.
def punkty_po_tej_samej_stronie(a, punkt_b, prosta):
    wartosc_a = prosta(a[0])
    b = prosta(punkt_b[0])
    return (wartosc_a > 0 and b > 0) or (wartosc_a < 0 and b < 0)
def czy_prosta_równoległa_do_oy(prosta):
    return prosta(0) == prosta(0)
a = 2
b = 3
prosta_przyklad = lambda x: a * x + b
punkt1 = (1, 5)
punkt2 = (2, 9)
wynik_punkty_po_tej_samej_stronie = punkty_po_tej_samej_stronie(punkt1, punkt2, prosta_przyklad)
wynik_czy_prosta_równoległa_do_oy = czy_prosta_równoległa_do_oy(lambda x: a)
print("Punkty leżą po tej samej stronie prostej:", wynik_punkty_po_tej_samej_stronie)
print("Prosta jest równoległa do osi OY:", wynik_czy_prosta_równoległa_do_oy)
